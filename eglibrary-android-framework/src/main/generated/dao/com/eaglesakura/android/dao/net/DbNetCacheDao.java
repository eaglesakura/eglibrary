package com.eaglesakura.android.dao.net;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.eaglesakura.android.dao.net.DbNetCache;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DB_NET_CACHE.
*/
public class DbNetCacheDao extends AbstractDao<DbNetCache, String> {

    public static final String TABLENAME = "DB_NET_CACHE";

    /**
     * Properties of entity DbNetCache.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Url = new Property(0, String.class, "url", true, "URL");
        public final static Property CacheType = new Property(1, int.class, "cacheType", false, "CACHE_TYPE");
        public final static Property BodySize = new Property(2, int.class, "bodySize", false, "BODY_SIZE");
        public final static Property Body = new Property(3, byte[].class, "body", false, "BODY");
        public final static Property Method = new Property(4, String.class, "method", false, "METHOD");
        public final static Property CacheTime = new Property(5, java.util.Date.class, "cacheTime", false, "CACHE_TIME");
        public final static Property CacheLimit = new Property(6, java.util.Date.class, "cacheLimit", false, "CACHE_LIMIT");
        public final static Property Etag = new Property(7, String.class, "etag", false, "ETAG");
        public final static Property Hash = new Property(8, String.class, "hash", false, "HASH");
    };


    public DbNetCacheDao(DaoConfig config) {
        super(config);
    }
    
    public DbNetCacheDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DB_NET_CACHE' (" + //
                "'URL' TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: url
                "'CACHE_TYPE' INTEGER NOT NULL ," + // 1: cacheType
                "'BODY_SIZE' INTEGER NOT NULL ," + // 2: bodySize
                "'BODY' BLOB," + // 3: body
                "'METHOD' TEXT NOT NULL ," + // 4: method
                "'CACHE_TIME' INTEGER NOT NULL ," + // 5: cacheTime
                "'CACHE_LIMIT' INTEGER NOT NULL ," + // 6: cacheLimit
                "'ETAG' TEXT," + // 7: etag
                "'HASH' TEXT);"); // 8: hash
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DB_NET_CACHE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DbNetCache entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUrl());
        stmt.bindLong(2, entity.getCacheType());
        stmt.bindLong(3, entity.getBodySize());
 
        byte[] body = entity.getBody();
        if (body != null) {
            stmt.bindBlob(4, body);
        }
        stmt.bindString(5, entity.getMethod());
        stmt.bindLong(6, entity.getCacheTime().getTime());
        stmt.bindLong(7, entity.getCacheLimit().getTime());
 
        String etag = entity.getEtag();
        if (etag != null) {
            stmt.bindString(8, etag);
        }
 
        String hash = entity.getHash();
        if (hash != null) {
            stmt.bindString(9, hash);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DbNetCache readEntity(Cursor cursor, int offset) {
        DbNetCache entity = new DbNetCache( //
            cursor.getString(offset + 0), // url
            cursor.getInt(offset + 1), // cacheType
            cursor.getInt(offset + 2), // bodySize
            cursor.isNull(offset + 3) ? null : cursor.getBlob(offset + 3), // body
            cursor.getString(offset + 4), // method
            new java.util.Date(cursor.getLong(offset + 5)), // cacheTime
            new java.util.Date(cursor.getLong(offset + 6)), // cacheLimit
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // etag
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // hash
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DbNetCache entity, int offset) {
        entity.setUrl(cursor.getString(offset + 0));
        entity.setCacheType(cursor.getInt(offset + 1));
        entity.setBodySize(cursor.getInt(offset + 2));
        entity.setBody(cursor.isNull(offset + 3) ? null : cursor.getBlob(offset + 3));
        entity.setMethod(cursor.getString(offset + 4));
        entity.setCacheTime(new java.util.Date(cursor.getLong(offset + 5)));
        entity.setCacheLimit(new java.util.Date(cursor.getLong(offset + 6)));
        entity.setEtag(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setHash(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(DbNetCache entity, long rowId) {
        return entity.getUrl();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(DbNetCache entity) {
        if(entity != null) {
            return entity.getUrl();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
