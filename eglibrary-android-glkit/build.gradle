apply plugin: 'com.android.library'
apply plugin: 'android-apt'

def APPLICATION_ID = "com.eaglesakura.android.glkit"

if (!hasProperty("EGLIBRARY_MAVEN_LOCAL_PATH")) {
    ext.EGLIBRARY_MAVEN_LOCAL_PATH = ""
}
if (!hasProperty("EGLIBRARY_ARTIFACT_VERSION")) {
    ext.EGLIBRARY_ARTIFACT_VERSION = ""
}

configurations {
    apt
}

dependencies {
    compile project(':eglibrary-android-java-core')
    compile 'com.eaglesakura:joint-connector-annotation:0.1.13'
}


android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    defaultConfig {
        minSdkVersion 10
        targetSdkVersion 22
    }


    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            jniLibs.srcDirs = ['../ndk/eglibrary-android-glkit/libs']
        }
    }

    lintOptions {
        disable "NewApi"
    }
}

//android.libraryVariants.all { variant ->
//    task("${variant.name}Javadoc", type: Javadoc) {
//        title = "$name $version API"
//        description "Generates Javadoc for $variant.name."
//        source = variant.javaCompile.source
//        ext.androidJar =
//                "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
//        classpath = files(android.libraryVariants.release.javaCompile.classpath.files) + files(ext.androidJar) + files("build/intermediates/classes/release/")
//        options.links("http://docs.oracle.com/javase/7/docs/api/");
//        options.links("http://d.android.com/reference/");
//        exclude '**/BuildConfig.java'
//        exclude '**/*Dao.java' /* ignore greenDAO */
//        exclude '**/R.java' /* ignore greenDAO */
//    }
//}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    title = "Android Release API"
    description "Generates Javadoc for Release."
    source = android.libraryVariants.release.javaCompile.source
    ext.androidJar =
            "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
    classpath = files(android.libraryVariants.release.javaCompile.classpath.files) + files(ext.androidJar) + files("build/intermediates/classes/release/")
    options.links("http://docs.oracle.com/javase/7/docs/api/");
    options.links("http://d.android.com/reference/");
    exclude '**/BuildConfig.java'
    exclude '**/R.java'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

// export cpp
///**
// * 事前に"gradle assemble"を行い、classesを吐き出しておく
// */
//task generateCppSource(type: com.eaglesakura.jc.gradle.tasks.ExportTask) {
//    projectPath = file('.').absolutePath;
//    cppGeneratePath = file("../ndk/${file('.').name}/jni/jcgen").absolutePath
//    tempGeneratePath = file("./build/joint-connector/jnibuild.jointclasses").absolutePath
//    exportCppHeader = false;
//    dex2jarCommand = System.getenv("DEX2JAR_PATH")
//}
//
