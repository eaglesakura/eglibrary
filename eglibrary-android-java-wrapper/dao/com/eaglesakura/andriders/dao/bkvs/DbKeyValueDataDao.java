package com.eaglesakura.andriders.dao.bkvs;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.eaglesakura.andriders.dao.bkvs.DbKeyValueData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DB_KEY_VALUE_DATA.
*/
public class DbKeyValueDataDao extends AbstractDao<DbKeyValueData, String> {

    public static final String TABLENAME = "DB_KEY_VALUE_DATA";

    /**
     * Properties of entity DbKeyValueData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Key = new Property(0, String.class, "key", true, "KEY");
        public final static Property Value = new Property(1, byte[].class, "value", false, "VALUE");
        public final static Property Date = new Property(2, java.util.Date.class, "date", false, "DATE");
    };


    public DbKeyValueDataDao(DaoConfig config) {
        super(config);
    }
    
    public DbKeyValueDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DB_KEY_VALUE_DATA' (" + //
                "'KEY' TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: key
                "'VALUE' BLOB," + // 1: value
                "'DATE' INTEGER NOT NULL );"); // 2: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DB_KEY_VALUE_DATA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DbKeyValueData entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getKey());
 
        byte[] value = entity.getValue();
        if (value != null) {
            stmt.bindBlob(2, value);
        }
        stmt.bindLong(3, entity.getDate().getTime());
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DbKeyValueData readEntity(Cursor cursor, int offset) {
        DbKeyValueData entity = new DbKeyValueData( //
            cursor.getString(offset + 0), // key
            cursor.isNull(offset + 1) ? null : cursor.getBlob(offset + 1), // value
            new java.util.Date(cursor.getLong(offset + 2)) // date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DbKeyValueData entity, int offset) {
        entity.setKey(cursor.getString(offset + 0));
        entity.setValue(cursor.isNull(offset + 1) ? null : cursor.getBlob(offset + 1));
        entity.setDate(new java.util.Date(cursor.getLong(offset + 2)));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(DbKeyValueData entity, long rowId) {
        return entity.getKey();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(DbKeyValueData entity) {
        if(entity != null) {
            return entity.getKey();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
